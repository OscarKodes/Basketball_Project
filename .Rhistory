FieldGoalAttempts <- rbind(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
rm(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
colnames(FieldGoalAttempts) <- Seasons
rownames(FieldGoalAttempts) <- Players
#Points
KobeBryant_PTS <- c(2832,2430,2323,2201,1970,2078,1616,2133,83,782)
JoeJohnson_PTS <- c(1653,1426,1779,1688,1619,1312,1129,1170,1245,1154)
LeBronJames_PTS <- c(2478,2132,2250,2304,2258,2111,1683,2036,2089,1743)
CarmeloAnthony_PTS <- c(2122,1881,1978,1504,1943,1970,1245,1920,2112,966)
DwightHoward_PTS <- c(1292,1443,1695,1624,1503,1784,1113,1296,1297,646)
ChrisBosh_PTS <- c(1572,1561,1496,1746,1678,1438,1025,1232,1281,928)
ChrisPaul_PTS <- c(1258,1104,1684,1781,841,1268,1189,1186,1185,1564)
KevinDurant_PTS <- c(903,903,1624,1871,2472,2161,1850,2280,2593,686)
DerrickRose_PTS <- c(597,597,597,1361,1619,2026,852,0,159,904)
DwayneWade_PTS <- c(2040,1397,1254,2386,2045,1941,1082,1463,1028,1331)
#Matrix
Points <- rbind(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
rm(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
colnames(Points) <- Seasons
rownames(Points) <- Players
Games
Games
#FTA per game
myplot(FreeThrowsAttempts/Games)
myplot(FreeThrows/FreeThrowsAttempts)
myplot(FieldGoalAttempts-FreeThrowAttempts)
myplot(FieldGoalAttempts-FreeThrowsAttempts)
myplot((FieldGoalAttempts-FreeThrowsAttempts)/Games)
myplot((Points-FreeThrows)/FieldGoals)
myplot(round((Points-FreeThrows)/FieldGoals, 0))
# Does the player prefer 2 pointers or 3 pointers?
myplot(round((Points-FreeThrows)/FieldGoals, 1))
# Average number of points per fieldgoal
myplot((Points-FreeThrows)/FieldGoals)
# Does the player prefer 2 pointers or 3 pointers?
myplot(round((Points-FreeThrows)/FieldGoals, 1))
#FT Attempts per game
myplot(FreeThrowsAttempts/Games)
#Free Throw Accuracy
myplot(FreeThrows/FreeThrowsAttempts)
# Does the player prefer 2 pointers or 3 pointers?
myplot(round((Points-FreeThrows)/FieldGoals, 1))
#FT Attempts per game
myplot(FreeThrowsAttempts/Games)
#Free Throw Accuracy
myplot(FreeThrows/FreeThrowsAttempts)
myplot(FieldGoals/FieldGoalAttempts)
knitr::opts_chunk$set(echo = TRUE)
# clear memory
rm(list=ls())
# check memory
gc()
# set directory
setwd("C:/Users/Oscar Ko/Desktop/Review-Stats-R")
library(tidyverse) #importing, cleaning, recoding, and analyzing data
install.packages("jsonlite")
library(tidyverse) #importing, cleaning, recoding, and analyzing data
# import files
WLS_educ <- read_dta("data/WLS_educ.dta")
# import files
WLS_educ <- read.dta("data/WLS_educ.dta")
library(tidyverse) #importing, cleaning, recoding, and analyzing data
library(magrittr) # pipe operator
library(haven) # reading recent versions of stata, spss, sas files.
library(foreign) # reading old versions of stata, spss, sas files.
library(sjmisc) # data and variable transformations
# import files
WLS_educ <- read.dta("data/WLS_educ.dta")
# import files
WLS_educ <- read_dta("data/WLS_educ.dta")
rm(list=ls())
# check memory
gc()
# set directory
setwd("C:/Users/Oscar Ko/Desktop/Review-Stats-R")
library(tidyverse) #importing, cleaning, recoding, and analyzing data
library(magrittr) # pipe operator
library(haven) # reading recent versions of stata, spss, sas files.
library(foreign) # reading old versions of stata, spss, sas files.
library(sjmisc) # data and variable transformations
# import files
WLS_educ <- read_dta("data/WLS_educ.dta")
# set directory
setwd("C:/Users/Oscar Ko/Desktop/Review-Stats-R")
# set directory
setwd("C:/Users/Oscar Ko/Desktop/Review-Stats-R")
# import files
WLS_educ <- read_dta("data/WLS_educ.dta")
WLS_health <- read_dta("data/WLS_health.dta")
# cbind WLC_educ and WLS_health together into on dataframe
WLS <- cbind(WLS_educ, WLS_health)
head(WLS)
# Select only the columns that we need
WLS <- select(WLS, brdxdy, sexrsp, edfa57q, edmo57q, spouse_edu, resp_edu, health)
colnames(WLS_educ)
colnames(WLS_educ)
colnames(WLS_health)
colnames(WLS)
# Use mutate to create two new variables
# Seperate spouse education and respondent education into three categories
WLS <- mutate (WLS,
r_edu = case_when(
resp_edu ==12 ~ "1 HS or Less",
resp_edu >= 13 & resp_edu <16 ~ "2 Some College",
resp_edu >=16 & resp_edu ~ "3 BA or more"))
WLS <- mutate (WLS,
sp_edu = case_when (
spouse_edu == 12 ~ "1 HS or Less",
spouse_edu >=13 & spouse_edu < 16 ~ "2 Some College",
spouse_edu >=16 ~ "3 BA or more"))
colnames(WLS)
levels(WLS$r_edu)
str(WLS)
summary(WLS)
glimpse(WLS)
# basic cross tabulation of frequencies======
table(WLS$r_edu, WLS$sp_edu)
# cross table of proportions================
prop.table(table(WLS$r_edu, WLS$sp_edu), 1)
# chi-square test===========================
chisq.test(WLS$r_edu, WLS$sp_edu)
library(expss) # package to make cross-tabulations tables
library(descr) # (For some reason R can't use crosstab without descr)
# Make fancier cross tabs with expss package
educTable <- crosstab(WLS$r_edu,
WLS$sp_edu,
prop.r = T,
chisq = T,
dnn=c("Respondent's education",
"Spouse's education"))
educTable
WLS <- mutate (WLS,
mar_types = case_when (
r_edu == sp_edu ~ "homogamous",
sexrsp == 1 & r_edu == "1 HS or Less" & (sp_edu == "2 Some College" | sp_edu == "3 BA or more") ~ "hypogamous",
sexrsp == 1 & r_edu == "2 Some College" & sp_edu == "3 BA or more" ~ "hypogamous",
sexrsp == 2 & sp_edu == "1 HS or Less" & (r_edu == "2 Some College" | r_edu == "3 BA or more") ~ "hypogamous",
sexrsp == 2 & sp_edu == "2 Some College" & r_edu == "3 BA or more" ~ "hypogamous",
TRUE ~ "hypergamous"))
WLS <- mutate(WLS, isHomo = ifelse(WLS$mar_types == "homogamous", 1, 0))
WLS <- mutate(WLS, isHypo = ifelse(WLS$mar_types == "hypogamous", 1, 0))
WLS <- mutate(WLS, isHyper = ifelse(WLS$mar_types == "hypergamous", 1, 0))
# check column names
colnames(WLS)
# show frequency distribution table
freq(WLS$mar_types)
# basic cross tabulation of frequencies======
table(WLS$r_edu, WLS$health)
# cross table of proportions================
prop.table(table(WLS$r_edu, WLS$health), 1)
# chi-square test===========================
chisq.test(WLS$r_edu, WLS$health)
# Use apply_labels on DataFrame GSS =====================
WLS = apply_labels(WLS, health = c("1 Least Healthy" = 1,
"2 Less Healthy"= 2,
"3 More Healthy" = 3,
"4 Most Healthy" = 4))
# Make fancier cross tabs with expss package
healthTable <- crosstab(WLS$r_edu,
WLS$health,
prop.r = T,
chisq = T,
dnn=c("Respondent's Education",
"Respondent's Health"))
healthTable
# basic cross tabulation of frequencies======
table(WLS$mar_types, WLS$health)
# cross table of proportions================
prop.table(table(WLS$mar_types, WLS$health), 1)
# chi-square test===========================
chisq.test(WLS$mar_types, WLS$health)
# Use apply_labels on DataFrame GSS =====================
WLS = apply_labels(WLS, health = c("1 Least Healthy" = 1,
"2 Less Healthy"= 2,
"3 More Healthy" = 3,
"4 Most Healthy" = 4))
# Make fancier cross tabs with expss package
mar_healthTable <- crosstab(WLS$mar_types,
WLS$health,
prop.r = T,
chisq = T,
dnn=c("Marriage Type",
"Respondent's Health"))
mar_healthTable
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())   # clear memory
gc()
setwd("C:/Users/Oscar Ko/Desktop/Review-Stats-R")
library(tidyverse) #importing, cleaning, recoding, and analyzing data
library(magrittr) # pipe operator
library(haven) # reading recent versions of stata, spss, sas files. For earlier versions, use the "foreign" package
library(foreign)
library(sjmisc) # data and variable transformations
library(expss) # package to make cross-tabulations tables
library(dplyr)
library(descr)
#Importing stata files:
WLS_educ <- read_dta("data/WLS_educ.dta")
WLS_health <- read_dta("data/WLS_health.dta")
# Examining the two data sets shows you that WLS_health has 2 variables (id and health). There are 4,641 unique individuals. These individuals are the same individuals in WLS_educ. WLS_educ has 7 variables but does not have the health variable.
glimpse(WLS_educ)
glimpse(WLS_health)
# Use the bind command to combine 2 data sets and create a new data frame, WLS. In this code, I have also included an additional step that filters in only the variables that I will use to analyze memo 4.
WLS <- cbind(WLS_educ, WLS_health) %>%
select(brdxdy, sexrsp, edfa57q, edmo57q, spouse_edu, resp_edu, health)
glimpse(WLS)
# Creating new categorical educational attainment variables for respondent and spouse
WLS <- WLS %>%
mutate (
r_edu = case_when(
resp_edu ==12 ~ "1 HS or Less",
resp_edu >= 13 & resp_edu <16 ~ "2 Some College",
resp_edu >=16 & resp_edu ~ "3 BA or more"),
sp_edu = case_when (
spouse_edu == 12 ~ "1 HS or Less",
spouse_edu >=13 & spouse_edu < 16 ~ "2 Some College",
spouse_edu >=16 ~ "3 BA or more"))
table(WLS$r_edu, WLS$sp_edu) #basic cross tabulation of frequencies
prop.table(table(WLS$r_edu, WLS$sp_edu), 1)
chisq.test(WLS$r_edu, WLS$sp_edu)
crosstab(WLS$r_edu, WLS$sp_edu, prop.r = T, chisq = T, dnn=c("Respondent's education", "Spouse's education"))
# Creating marriage type variable
WLS <- WLS %>%
mutate(
homogamous = ifelse(r_edu == sp_edu, 1, 0 ),
hypergamous = ifelse(sexrsp == 1 & r_edu > sp_edu | sexrsp == 2 & r_edu < sp_edu, 1, 0),
hypogamous = ifelse(sexrsp == 2 & r_edu > sp_edu | sexrsp == 1 & r_edu < sp_edu, 1, 0),
marriage_type = case_when(
homogamous==1 ~ "1 Homogamous",
hypergamous==1 ~ "2 Hypergamous",
hypogamous==1 ~ "3 Hypogamous"
))
frequency(WLS$homogamous)
frequency(WLS$hypergamous)
frequency(WLS$hypogamous)
table(WLS$marriage_type, WLS$homogamous)
table(WLS$marriage_type, WLS$hypergamous)
table(WLS$marriage_type, WLS$hypogamous)
WLS <- WLS %>%
mutate(
health4 = case_when(
health==1 ~ "1 Fair or less",
health==2 ~ "2 Good",
health==3 ~ "3 Very Good",
health==4 ~ "4 Excellent"
))
frequency(WLS$health4)
table(WLS$health, WLS$health4)
## Option 1
prop.table(table(WLS$r_edu, WLS$health4), 1)
chisq.test(WLS$r_edu, WLS$health)
prop.table(table(WLS$marriage_type, WLS$health4), 1)
chisq.test(WLS$r_edu, WLS$health)
## Option 2
flat_table(WLS, r_edu, health, margin = "row")
chisq.test(WLS$r_edu, WLS$health)
## Option 3
crosstab(WLS$r_edu, WLS$health4, prop.r = T, chisq = T, dnn=c("Education level", "Self-rated health"))
crosstab(WLS$marriage_type,
WLS$health4,
dnn=c("Marriage Type", "Self-Rated Health"),
prop.r = T,
chisq = T)
# Clear Everything
rm(list = ls())
# Set working directory
setwd("C:/Users/Oscar Ko/Desktop/BasketBall_Project")
# Get working directory
getwd()
# Get data
salary_data <- read.csv("basketball_player_Salaries.csv")
basketball_data <- read.csv("players_stats_by_season_full_details.csv")
# Examine data
head(salary_data)
head(basketball_data)
basketball_data <- read.csv("players_stats_by_season_full_details.csv")
View(salary_data)
View(basketball_data)
tail(salary_data)
tail(basketball_data)
str(salary_data)
str(basketball_data)
summary(salary_data)
summary(basketball_data)
colnames(salary_data)
colnames(basketball_data)
# library
library(tidyverse)
# Filter out only NBA League and only regular season
filter_NBA_league <- basketball_data$League == "NBA"
filter_regular_season <- basketball_data$Season == "Regular_Season"
basketball_data <- basketball_data[filter_NBA_league & filter_regular_season, ]
basketball_data <- read.csv("players_stats_by_season_full_details.csv")
filter_NBA_league <- basketball_data$League == "NBA"
filter_regular_season <- basketball_data$Season == "Regular_Season"
NBA_data <- basketball_data[filter_NBA_league && filter_regular_season, ]
NBA_data <- basketball_data[filter_NBA_league, ]
head(basketball_data$Season)
colnames(basketball_data)
filter_regular_season <- basketball_data$Stage == "Regular_Season"
rm(list = ls())
# Set working directory
setwd("C:/Users/Oscar Ko/Desktop/BasketBall_Project")
# Get working directory
getwd()
# Get data
salary_data <- read.csv("basketball_player_Salaries.csv")
basketball_data <- read.csv("players_stats_by_season_full_details.csv")
# Examine data
# library
library(tidyverse)
filter_league <- basketball_data$League == "NBA"
filter_stage <- basketball_data$Stage == "Regular_Season"
NBA_data <- basketball_data[filter_league && filter_stage, ]
colnames(NBA_data)
# Selected only needed columns
typeof(colnames(NBA_data))
# Selected only needed columns
my_vector <- colnames(NBA_data)
columns_to_keep <- my_vector[! my_vector %in% c("draft_team",
"draft_pick",
"draft_round",
"high_school",
"nationality",
"League",
"Stage")]
NBA_data <- select(data, columns_to_keep)
NBA_data <- select(NBA_data, columns_to_keep)
columns_to_keep
NBA_data2 <- NBA_data[NBA_data == columns_to_keep, ]
colnames(NBA_data2)
# Clear Everything
rm(list = ls())
# Set working directory
setwd("C:/Users/Oscar Ko/Desktop/BasketBall_Project")
# Get working directory
getwd()
# Get data
salary_data <- read.csv("basketball_player_Salaries.csv")
basketball_data <- read.csv("players_stats_by_season_full_details.csv")
# Filter out only NBA League and only regular season
filter_league <- basketball_data$League == "NBA"
filter_stage <- basketball_data$Stage == "Regular_Season"
NBA_data <- basketball_data[filter_league && filter_stage, ]
# Selected only needed columns
cols_to_remove <- c("draft_team",
"draft_pick",
"draft_round",
"high_school",
"nationality",
"League",
"Stage")
NBA_data2 <- NBA_data[!(NBA_data %in% cols_to_remove), ]
colnames(NBA_data2)
NBA_data2 <- NBA_data[!NBA_data %in% cols_to_remove, ]
colnames(NBA_data2)
cols_to_keep <- NBA_data[! NBA_data %in% cols_to_remove]
cols_to_keep
# Selected only needed columns
c_names <- colnames(NBA_data)
cols_to_remove <- c("draft_team",
"draft_pick",
"draft_round",
"high_school",
"nationality",
"League",
"Stage")
cols_to_keep <- c_names[! c_names %in% cols_to_remove]
cols_to_keep
NBA_data <- NBA_data[cols_to_keep, ]
colnames(NBA_data)
NBA_data <- NBA_data[cols_to_keep, ]
colnames(NBA_data)
cols_to_keep
NBA_data <- NBA_data[NBA_data == cols_to_keep, ]
colnames(NBA_data)
cols_to_keep
# Clear Everything
rm(list = ls())
# Set working directory
setwd("C:/Users/Oscar Ko/Desktop/BasketBall_Project")
# Get working directory
getwd()
# Get data
salary_data <- read.csv("basketball_player_Salaries.csv")
basketball_data <- read.csv("players_stats_by_season_full_details.csv")
# Filter out only NBA League and only regular season
filter_league <- basketball_data$League == "NBA"
filter_stage <- basketball_data$Stage == "Regular_Season"
NBA_data <- basketball_data[filter_league && filter_stage, ]
# Selected only needed columns
c_names <- colnames(NBA_data)
cols_to_remove <- c("draft_team",
"draft_pick",
"draft_round",
"high_school",
"nationality",
"League",
"Stage")
filter_cols <- !(c_names %in% cols_to_remove)
NBA_data <- NBA_data[filter_cols, ]
colnames(NBA_data)
NBA_data <- basketball_data[filter_league && filter_stage, ]
NBA_data <- NBA_data[, filter_cols]
colnames(NBA_data)
colnames(salary_data)
head(NBA_data)
head(salary_data)
# Turn Year data into Season
salary_data <- mutate(salary_data,
Season=paste(as.character(year - 1), as.character(year), sep=" - "))
head(salary_data)
tail(salary_data)
head(NBA_data)
# Select columns to keep
colnames(salary_data)
salary_data <- select(salary_data,
Player="name",
Position="position",
Team="team",
Salary="salary",
"Season")
salary_data
head(salary_data)
# merge
merged_data <- merge(NBA_data, salary_data, by = c("Player","Season"))
head(merged_data)
head(NBA_data)
head(NBA_data[NBA_data$Player == "Aaron Brooks"],)
NBA_data[NBA_data$Player == "Aaron Brooks"]
NBA_data[NBA_data$Player == "Aaron Brooks",]
unique(NBA_data$Stage)
Unique(NBA_data$Stage)
NBA_data <- basketball_data[filter_league && filter_stage, ]
unique(NBA_data$Stage)
unique(NBA_data$League)
NBA_data <- basketball_data[filter_league, ]
unique(NBA_data$League)
NBA_data <- NBA_data[filter_stage, ]
unique(NBA_data$Stage)
# Filter out only NBA League and only regular season
filter_NBA <- (basketball_data$League == "NBA") && (basketball_data$Stage == "Regular_Season")
NBA_data <- basketball_data[filter_NBA, ]
unique(NBA_data$League)
# Filter out only NBA League and only regular season
filter_league <- basketball_data$League == "NBA"
NBA_data <- basketball_data[filter_league, ]
unique(NBA_data$League)
filter_state <- NBA_data$Stage == "Regular_Season")
filter_state <- NBA_data$Stage == "Regular_Season"
NBA_data <- NBA_data[filter_stage, ]
unique(NBA_data$Stage)
filter_stage <- NBA_data$Stage == "Regular_Season"
NBA_data <- NBA_data[filter_stage, ]
unique(NBA_data$Stage)
# Clear Everything
rm(list = ls())
# Set working directory
setwd("C:/Users/Oscar Ko/Desktop/BasketBall_Project")
# Get working directory
getwd()
# Get data
salary_data <- read.csv("basketball_player_Salaries.csv")
basketball_data <- read.csv("players_stats_by_season_full_details.csv")
library(tidyverse)
# Filter out only NBA League and only regular season
filter_league <- basketball_data$League == "NBA"
NBA_data <- basketball_data[filter_league, ]
unique(NBA_data$League)
filter_stage <- NBA_data$Stage == "Regular_Season"
NBA_data <- NBA_data[filter_stage, ]
unique(NBA_data$Stage)
# Filter out unneeded columns
c_names <- colnames(NBA_data)
cols_to_remove <- c("draft_team",
"draft_pick",
"draft_round",
"high_school",
"nationality",
"League",
"Stage")
filter_cols <- !(c_names %in% cols_to_remove)
NBA_data <- NBA_data[, filter_cols]
# Cleaning salary_data dataframe ============================
# Turn Year data into Season
salary_data <- mutate(salary_data,
Season=paste(as.character(year - 1),
as.character(year), sep=" - "))
# Select columns to keep
colnames(salary_data)
salary_data <- select(salary_data,
Player="name",
Position="position",
Team="team",
Salary="salary",
"Season")
head(salary_data)
# Combining data frames =====================================
# merge
merged_data <- merge(NBA_data, salary_data, by = c("Player","Season"))
head(merged_data)
tail(merged_data)
# rename team columns
colnames(merged_data$Team.x) <- Team_Code
# rename team columns
colnames(merged_data$Team.x) <- "Team_Code"
# rename team columns
names(merged_data)[names(merged_data) == "Team.x"] <- "Team_Code"
names(merged_data)[names(merged_data) == "Team.y"] <- "Team_Name"
colnames(merged_data)
# Create csv file of merged data
write.csv(merged_data, file = "merged_data.csv", row.names=F)
